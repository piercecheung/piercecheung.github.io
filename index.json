[{"content":"Recently I\u0026rsquo;m working on build my own tech blog so I did some google search trying to find a \u0026ldquo;morden\u0026rdquo; way to build it. (I have been using Wordpress for some blogs and websites before.) The finnal two are Jekyll and Hugo, which are both Static Site generators with a lot of adoptions. After reading some articales about the comparison and the documentation of these two, I decided to try to build my own blog using Hugo and GitHub Actions.\n Prerequisites  GitHub Account: Need to have a GitHub account to be able to push the blog to Github repository. Free account is enough. Git: Need to have Git installed on your machine.   Step 1 - Build the website using Hugo Locally First of all, You need to build the website using Hugo locally or at least has go throuth the Quickstart guide\nStep 1.1 - Install Hugo According to your OS, you can install Hugo perspectively. I\u0026rsquo;m using MacOS:\nbrew install hugo Check the version of Hugo:\nhugo version The output should be:\nhugo v0.92.0+extended darwin/amd64 BuildDate=unknown Step 1.2 - Create a new Hugo site, install a theme you like Hugo provides a lot of theme for you to choose from. I\u0026rsquo;m using PaperMod theme, which is responsive and minimal. You can choose a theme from the Hugo Themes.\nFirst create a new hugo site:\nhugo new site \u0026lt;your sitename\u0026gt; Then install the PaperMod theme:\ncd \u0026lt;your sitename\u0026gt; git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1  üìù Note: You can choose to install the themes using Git Clone: git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 or choose to install the theme by downloading the zip file: Master Branch (Latest) and extract in the theme folder.\n Modify the config.yaml file to add the theme:\ntheme = \u0026#34;PaperMod\u0026#34;  üìù Note: Hugo support 3 types of config file: config.toml, config.yaml and config.json. You can use by your choice. For further refernce, Configure Hugo\n Step 1.3 - Add a post Then add a post:\nhugo new posts/\u0026lt;your post name\u0026gt;.md Add the contents of the post, it should start with the following:\n--- title: \u0026#34;\u0026lt;your post name\u0026gt;\u0026#34; date: 2022-01-19T23:05:28-08:00 draft: true --- To test the post locally, you need to start a hugo server and publish your post:\nhugo server -D This will start a hugo server and publish your site and then you can visit the site in your browser via the URL: http://localhost:1313/.\n üìù Note: The -D flag is used to build the site with content marked as draft. If you finish draft the post and want to publish it to the site, you need to remove the draft: true or change it to draft: false in \u0026lt;your post name\u0026gt;.md. For more usage, please check the Basic Usage\n After testing the site, now you are ready to dploy the website to your Github repository and Github Pages.\n Step 2 - Build the website on GitHub Pages using GitHub Actions According to GitHub Docs, you can build a user/orgnization site or a project site on GitHub Pages. As for me I would like to build a user site for my personal blog.\nAnd according to GitHub Actions for GitHub Pages, the default config is to use the master branch as the source branch to hold the hugo files and to use the gh-pages branch as the destination branch to hold the published website, both are in the same repository.\nBut it\u0026rsquo;s more simple and error avoiding to use a private repository for the source (the hugo files) and a public repository for the published website, for the following reasons:\n Keep the hugo source files in a private repository; Avoid the error that will be caused with the GITHUB_TOKEN because for the first time of building the site, it will use the master branch to host the site, so you need to config it to use the gh-pages branch manually. For futher infomation, refer to First Deployment with GITHUB_TOKEN.  So let\u0026rsquo;s create some new repositories on GitHub:\nStep 2.1 - Create new GitHub repositories Create a new private repository for the Hugo files, with a name that you like: yourhugosourcecode.\nAnd create a new public repository for the website, with a name in format: \u0026lt;githubusername\u0026gt;.github.io.\nLeave theses repositories empty.\nStep 2.2 - Configure Github Tokes for GitHub Actions Now let\u0026rsquo;s set up the personal_token:\nIn your GitHub Settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens, click Generate new token:\nSelect the repo scope:\nThen generate the token and copy the token to your clipboard.\nIn the private yourhugosourcecode repositoty Settings -\u0026gt; Secrets, click New repository secret:\nadd the Personal access token you just generated (in clipboard) as serect value and set the name PERSONAL_TOKEN:\nStep 2.3 - Setup GitHub Workflow Add your workflow file .github/workflows/gh-pages.yml to your local repository with following contents:\nname: github pages on: push: branches: - master  # Set a branch to deploy jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # The personal token for the GitHub Actions external_repository: \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io  # The external repository to deploy publish_dir: ./public # The directory to deploy, default is public folder full_commit_message: ${{ github.event.head_commit.message }} # cname: \u0026lt;your custom domain\u0026gt;  üìù Note: The full_commit_message is used to set the commit message when you push to the master branch, by using this setting, you can use the commit message from the push event in the public repo and avoid the ugly commit message with / that system will use. The cname is used to set the CNAME file for the website, if you don\u0026rsquo;t use a custome domain for your website, you need to comment out this line.\n Step 2.4 - Configure baseURL Because the github pages will use the url \u0026lt;githubusername\u0026gt;.github.io, so you need to set the baseURL in your config.yaml file:\nbaseURL: \u0026#34;https://\u0026lt;githubusername\u0026gt;.github.io\u0026#34; Step 2.5 - Deploy the website Now push the repository to the master branch and GitHub Actions will deploy the website automatically.\nYou can check the process at 2 locations:\n In hugo source file private repo, click the Actions, you will see the github pages workflow successfully deployed:   In \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io public repo, click the Actions, you will see the github pages workflow successfully deployed:  Step 2.6 - Check the website Now you can visit the website in your browser via the URL: http://\u0026lt;githubusername\u0026gt;.github.io/.\nStep 2.7 - Continue add more posts From now on, you can add more posts to the website. As soon as you test locally the website, you can push the repository to the yourhugosourcecode repo and GitHub Actions will deploy the website automatically.\nOptional - Using a custom domain GitHub Pages comes with a URL like \u0026lt;githubusername\u0026gt;.github.io, but you can also use a custom domain. To achive this, please refer to the Google Pages documentation: Configuring a custom domain.\nWhat I need to mention is that although after successfully setup a custom domain for the website, by which Google will automatically create a CNAME file for the website in your public repository root, with the custom domain you set, after you do any update by pushing to this repository, the file will be deleted by your push. So you need to add a line to your gh-pages.yaml file to set the cname, after this your config.yaml file will be:\nname: github pages on: push: branches: - master  # Set a branch to deploy jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # The personal token for the GitHub Actions external_repository: \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io  # The external repository to deploy publish_dir: ./public # The directory to deploy, default is public folder full_commit_message: ${{ github.event.head_commit.message }} cname: \u0026lt;your custom domain\u0026gt; # The custom domain you set This will create a CNAME file by GitHub Actions for the website in your public repository root everytime you do a push, and the custom domain will be used to access the website.\nAnd also at the same time you need to change the baseURL in your config.yaml file from \u0026lt;githubusername\u0026gt;.github.io to the custom domain, after this config your current config.yaml file should looks like this:\nbaseURL: \u0026#34;https://\u0026lt;your custom domain\u0026gt;/\u0026#34; title: \u0026lt;your website title\u0026gt; theme: PaperMod Epilogue Fianlly your website is successfully deployed to GitHub Pages. But this is only the beginning, you can continue to add more posts to the website, and you can also deploy more and more features or try different themes to your website.\nAs I can tell, Hugo is so many powerful, I hope you can find some useful features in it and add it to your website.\n","permalink":"https://blog.mindsmining.com/posts/how-to-build-static-website-using-hugo-github-actions/","summary":"A tutorial on how to build a static website using Hugo and GitHub Actions","title":"Build static website using Hugo and GitHub Actions"}]