[{"content":"I\u0026rsquo;ve built a website with Flask and Python and it\u0026rsquo;s only published in English. As the website will be mainly visited by people in China and other countries, I want to make the website a multilingual one, at least bilingual: Chinese and English.\nSo I started to build the multilingual website with Flask-Babel. Here are the steps.\n My existing project structure ├── venv │ ├── bin │ └── include ├── webapp │ ├── __init__.py │ ├── config.py │ ├── routes.py │ ├── static │ │ ├── favicon.ico │ │ └── styles.css │ └── templates │ ├── about.html │ ├── layout.html │ └── index.html ├── app.py └── requirements.txt  Install Flask-Babel The flask extension we need to install is Flask-Babel.\n(venv) $ pip install Flask-Babel Flask-Babel is easy to use, just like others, we need to add the following lines in the __init__.py file to initialize it:\n# ... from flask_babel import Babel app = Flask(__name__) # ... babel = Babel(app) As I\u0026rsquo;m going to translate the website into Chinese, I\u0026rsquo;m goint to add a configuration variable in the config.py file:\nclass Config(object):  # ...  LANGUAGES = [\u0026#39;en_US\u0026#39;, \u0026#39;zh_CN\u0026#39;] en_US and zh_CN are the language codes of English and Chinese respectively, with the _US and _CN suffixes to indicate the country code. You can use two-letter codes like en and zh as well.\nThe Babel instance has a localeselector function that is called when a request is made to the website and will return the language code of the user\u0026rsquo;s browser. The accept_languages object works with the Accept-Language header in the request that specifies the client language and locale perferences. best_match will return the best matches from the list of available languages.\nIn the __init__.py:\nfrom flask import request  # ...  @babel.localeselector def get_locale():  return request.accept_languages.best_match(app.config[\u0026#39;LANGUAGES\u0026#39;])  Marking Texts need to be translated Text in the Python Source Code As I have literal strings in the Python source code, like in the flash() statement, I need to mark them as translatable by wrapping them in the _() function. The _() function is a shortcut for gettext().\n# ... flash(\u0026#39;Hello, world!\u0026#39;) # ... Change the flash() statement to:\nfrom flask_babel import _ # from flask_babel import gettext as _ # ... flash(_(\u0026#39;Hello, world!\u0026#39;))  📝 Note: Don\u0026rsquo;t to forget to import the _() function from flask_babel. The _() function is a shortcut for gettext().\n Texts in the Templates For the text in the templates, the _() function is also available so the text can be marked as translatable in the similar way. For example we have a template about.html:\n\u0026lt;h1\u0026gt;About Us\u0026lt;/h1\u0026gt; Change it to:\n\u0026lt;h1\u0026gt;{{ _(\u0026#39;About Us\u0026#39;) }}\u0026lt;/h1\u0026gt;  📝 Note: {{ ... }} should be added to enforce the _() function to be called instead of being treated as a literal string.\n  Extracting Texts Once all the texts are marked as translatable with _(), we can translate them. As mentioned in the tutorial of Flask-Babel, the way is to use the pybabel to extract the texts from the source code and put them in the messages.pot file.\nFirst of all, we need to have some config, create babel.cfg file next to app.py:\n[python: webapp/**.py] [jinja2: webapp/templates/**.html] extensions=jinja2.ext.autoescape,jinja2.ext.with_ The first two lines should indicate the source files of source code and template html files respectively. The extensions line indicates two extensions provided by the Jinja2 template engine that help Flask-Babel properly parse template files.\nThen extract the texts from the source code and put them in the messages.pot file:\n(venv) $ pybabel extract -F babel.cfg -k _l -o messages.pot . extracting messages from webapp/__init__.py (extensions=\u0026#34;jinja2.ext.autoescape,jinja2.ext.with_\u0026#34;) extracting messages from webapp/config.py (extensions=\u0026#34;jinja2.ext.autoescape,jinja2.ext.with_\u0026#34;) extracting messages from webapp/routes.py (extensions=\u0026#34;jinja2.ext.autoescape,jinja2.ext.with_\u0026#34;) writing PO template file to messages.pot  📝 Note: The -o option indicates the output file. The -k option indicates the keyword to be used to mark the texts. If you use lazy_gettext() (imported as _l()) to mark the texts, the -k option should be _l. The _() function is by default.\n  Creating a language translation Now let\u0026rsquo;s create the language translation for the languages we want to translate to. For me, I want to translate the website into Chinese:\n(venv) $ pybabel init -i messages.pot -d webapp/translations -l zh creating catalog webapp/translations/zh/LC_MESSAGES/messages.po based on messages.pot  📝 Note: The -d option indicates the directory where the translations are stored.\n If you want to translate to other languages, just repeate the above steps seperately.\nFollowing is the messages.po that are created:\n# Chinese translations for PROJECT. # Copyright (C) 2022 ORGANIZATION # This file is distributed under the same license as the PROJECT project. # FIRST AUTHOR \u0026lt;EMAIL@ADDRESS\u0026gt;, 2022. # msgid \u0026#34;\u0026#34; msgstr \u0026#34;\u0026#34; \u0026#34;Project-Id-Version: PROJECT VERSION\\n\u0026#34; \u0026#34;Report-Msgid-Bugs-To: EMAIL@ADDRESS\\n\u0026#34; \u0026#34;POT-Creation-Date: 2022-04-29 14:30-0700\\n\u0026#34; \u0026#34;PO-Revision-Date: 2022-04-29 14:32-0700\\n\u0026#34; \u0026#34;Last-Translator: FULL NAME \u0026lt;EMAIL@ADDRESS\u0026gt;\\n\u0026#34; \u0026#34;Language: zh\\n\u0026#34; \u0026#34;Language-Team: zh \u0026lt;LL@li.org\u0026gt;\\n\u0026#34; \u0026#34;Plural-Forms: nplurals=1; plural=0;\\n\u0026#34; \u0026#34;MIME-Version: 1.0\\n\u0026#34; \u0026#34;Content-Type: text/plain; charset=utf-8\\n\u0026#34; \u0026#34;Content-Transfer-Encoding: 8bit\\n\u0026#34; \u0026#34;Generated-By: Babel 2.10.1\\n\u0026#34; #: webapp/routes.py:29 msgid \u0026#34;Hello, world!\u0026#34; msgstr \u0026#34;\u0026#34;  📝 Note: After the header, the first line begins with msgid is the original text extracted by _() or _l(), the second line begins with msgstr is the translation.\n You can translate the texts in the messages.po file to the languages you want to translate to. You can do it manually or using the translation editor like poedit.\n Compile the translations When your translation work is done, you need to compile the translation for use:\n(venv) $ pybabel compile -d webapp/translations compiling catalog webapp/translations/zh/LC_MESSAGES/messages.po to webapp/translations/zh/LC_MESSAGES/messages.mo This action will create the messages.mo file in the webapp/translations/zh/LC_MESSAGES directory.\nNow it\u0026rsquo;s time to test your translation work. One way is to adjust the language preference in your browser. For example, if you want to translate the website into Chinese, you can set the language preference to Simplified Chinese (zh-CN) in your browser\u0026rsquo;s language settings.\nThe other way is to force the language by making the localeselector function return the language you want to translate to. In the __init__.py file, make a change:\n@babel.localeselector def get_locale():  # return request.accept_languages.best_match(app.config[\u0026#39;LANGUAGES\u0026#39;])  return \u0026#39;zh_CN\u0026#39; Restart the server and you will see the website in Chinese.\n Updating the translations If the website has changed or you want to update the translations, you can use the pybabel to update:\nFirst, you need to re-extract the messages.pot file and then use the pybabel update to update the translations. This update process is kind of intelligent merge, only the changes will be updated.\n(venv) $ pybabel extract -F babel.cfg -k _l -o messages.pot . (venv) $ pybabel update -i messages.pot -d webapp/translations Now you can exam the messages.po file in the webapp/translations/zh/LC_MESSAGES directory to edit the translations. After you finish the editing, you can compile the translations:\n(venv) $ pybabel compile -d webapp/translations  Let the users decide the language My flask app has user login feature so I decided to let the users can decide the language they want to use after they logged in, if they don\u0026rsquo;t like the language that the browser locale chosed for them.\nThe language that the user selected will be stored in the session dictionary. So I will first check if the session['language'] is set. If it is, I will use it. Otherwise, I will use the browser locale.\nSo in the __init__.py file, make a change:\n@babel.localeselector def get_locale():  try:  language = session[\u0026#39;language\u0026#39;]  except KeyError:  language = None   if language is not None:  return language  else:  return request.accept_languages.best_match(app.config[\u0026#39;LANGUAGES\u0026#39;]) Then in the routes.py file, add a new route:\n@app.route(\u0026#34;/language/\u0026lt;language\u0026gt;\u0026#34;) def set_language(language):  session[\u0026#34;language\u0026#34;] = language  return redirect(request.referrer or url_for(\u0026#34;index\u0026#34;))  📝 Note: Very straight forward, get the language from the URL and set it to the session. Then redirect to the page that the user came from or to the index page if the user didn\u0026rsquo;t come from any page. Please note that if the user logged out, the session will be cleared and the language will be set to the browser locale next time the user visit the website.\n ","permalink":"https://blog.mindsmining.com/posts/how-to-make-a-flask-python-multiligual-website/","summary":"A brief summary of how to build a multilingual Flask Python website.","title":"Make a Flask Python Website Multilingual"},{"content":"Recently I\u0026rsquo;m working on build my own tech blog so I did some google search trying to find a \u0026ldquo;morden\u0026rdquo; way to build it. (I have been using Wordpress for some blogs and websites before.) The finnal two are Jekyll and Hugo, which are both Static Site generators with a lot of adoptions. After reading some articales about the comparison and the documentation of these two, I decided to try to build my own blog using Hugo and GitHub Actions.\n Prerequisites  GitHub Account: Need to have a GitHub account to be able to push the blog to Github repository. Free account is enough. Git: Need to have Git installed on your machine.   Step 1 - Build the website using Hugo Locally First of all, You need to build the website using Hugo locally or at least has go throuth the Quickstart guide\nStep 1.1 - Install Hugo According to your OS, you can install Hugo perspectively. I\u0026rsquo;m using MacOS:\nbrew install hugo Check the version of Hugo:\nhugo version The output should be:\nhugo v0.92.0+extended darwin/amd64 BuildDate=unknown Step 1.2 - Create a new Hugo site, install a theme you like Hugo provides a lot of theme for you to choose from. I\u0026rsquo;m using PaperMod theme, which is responsive and minimal. You can choose a theme from the Hugo Themes.\nFirst create a new hugo site:\nhugo new site \u0026lt;your sitename\u0026gt; Then install the PaperMod theme:\ncd \u0026lt;your sitename\u0026gt; git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1  📝 Note: You can choose to install the themes using Git Clone: git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 or choose to install the theme by downloading the zip file: Master Branch (Latest) and extract in the theme folder.\n Modify the config.yaml file to add the theme:\ntheme = \u0026#34;PaperMod\u0026#34;  📝 Note: Hugo support 3 types of config file: config.toml, config.yaml and config.json. You can use by your choice. For further refernce, Configure Hugo\n Step 1.3 - Add a post Then add a post:\nhugo new posts/\u0026lt;your post name\u0026gt;.md Add the contents of the post, it should start with the following:\n--- title: \u0026#34;\u0026lt;your post name\u0026gt;\u0026#34; date: 2022-01-19T23:05:28-08:00 draft: true --- To test the post locally, you need to start a hugo server and publish your post:\nhugo server -D This will start a hugo server and publish your site and then you can visit the site in your browser via the URL: http://localhost:1313/.\n 📝 Note: The -D flag is used to build the site with content marked as draft. If you finish draft the post and want to publish it to the site, you need to remove the draft: true or change it to draft: false in \u0026lt;your post name\u0026gt;.md. For more usage, please check the Basic Usage\n After testing the site, now you are ready to dploy the website to your Github repository and Github Pages.\n Step 2 - Build the website on GitHub Pages using GitHub Actions According to GitHub Docs, you can build a user/orgnization site or a project site on GitHub Pages. As for me I would like to build a user site for my personal blog.\nAnd according to GitHub Actions for GitHub Pages, the default config is to use the master branch as the source branch to hold the hugo files and to use the gh-pages branch as the destination branch to hold the published website, both are in the same repository.\nBut it\u0026rsquo;s more simple and error avoiding to use a private repository for the source (the hugo files) and a public repository for the published website, for the following reasons:\n Keep the hugo source files in a private repository; Avoid the error that will be caused with the GITHUB_TOKEN because for the first time of building the site, it will use the master branch to host the site, so you need to config it to use the gh-pages branch manually. For futher infomation, refer to First Deployment with GITHUB_TOKEN.  So let\u0026rsquo;s create some new repositories on GitHub:\nStep 2.1 - Create new GitHub repositories Create a new private repository for the Hugo files, with a name that you like: yourhugosourcecode.\nAnd create a new public repository for the website, with a name in format: \u0026lt;githubusername\u0026gt;.github.io.\nLeave theses repositories empty.\nStep 2.2 - Configure Github Tokes for GitHub Actions Now let\u0026rsquo;s set up the personal_token:\nIn your GitHub Settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens, click Generate new token:\nSelect the repo scope:\nThen generate the token and copy the token to your clipboard.\nIn the private yourhugosourcecode repositoty Settings -\u0026gt; Secrets, click New repository secret:\nadd the Personal access token you just generated (in clipboard) as serect value and set the name PERSONAL_TOKEN:\nStep 2.3 - Setup GitHub Workflow Add your workflow file .github/workflows/gh-pages.yml to your local repository with following contents:\nname: github pages  on:  push:  branches:  - master  # Set a branch to deploy  jobs:  deploy:  runs-on: ubuntu-latest  steps:  - uses: actions/checkout@v2  with:  submodules: true # Fetch Hugo themes (true OR recursive)  fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo  uses: peaceiris/actions-hugo@v2  with:  hugo-version: \u0026#39;latest\u0026#39;  extended: true   - name: Build  run: hugo --minify   - name: Deploy  uses: peaceiris/actions-gh-pages@v3  with:  personal_token: ${{ secrets.PERSONAL_TOKEN }} # The personal token for the GitHub Actions  external_repository: \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io  # The external repository to deploy  publish_dir: ./public # The directory to deploy, default is public folder  full_commit_message: ${{ github.event.head_commit.message }}  # cname: \u0026lt;your custom domain\u0026gt;  📝 Note: The full_commit_message is used to set the commit message when you push to the master branch, by using this setting, you can use the commit message from the push event in the public repo and avoid the ugly commit message with / that system will use. The cname is used to set the CNAME file for the website, if you don\u0026rsquo;t use a custome domain for your website, you need to comment out this line.\n Step 2.4 - Configure baseURL Because the github pages will use the url \u0026lt;githubusername\u0026gt;.github.io, so you need to set the baseURL in your config.yaml file:\nbaseURL: \u0026#34;https://\u0026lt;githubusername\u0026gt;.github.io\u0026#34; Step 2.5 - Deploy the website Now push the repository to the master branch and GitHub Actions will deploy the website automatically.\nYou can check the process at 2 locations:\n In hugo source file private repo, click the Actions, you will see the github pages workflow successfully deployed:   In \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io public repo, click the Actions, you will see the github pages workflow successfully deployed:  Step 2.6 - Check the website Now you can visit the website in your browser via the URL: http://\u0026lt;githubusername\u0026gt;.github.io/.\nStep 2.7 - Continue add more posts From now on, you can add more posts to the website. As soon as you test locally the website, you can push the repository to the yourhugosourcecode repo and GitHub Actions will deploy the website automatically.\nOptional - Using a custom domain GitHub Pages comes with a URL like \u0026lt;githubusername\u0026gt;.github.io, but you can also use a custom domain. To achive this, please refer to the Google Pages documentation: Configuring a custom domain.\nWhat I need to mention is that although after successfully setup a custom domain for the website, by which Google will automatically create a CNAME file for the website in your public repository root, with the custom domain you set, after you do any update by pushing to this repository, the file will be deleted by your push. So you need to add a line to your gh-pages.yaml file to set the cname, after this your config.yaml file will be:\nname: github pages  on:  push:  branches:  - master  # Set a branch to deploy  jobs:  deploy:  runs-on: ubuntu-latest  steps:  - uses: actions/checkout@v2  with:  submodules: true # Fetch Hugo themes (true OR recursive)  fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo  uses: peaceiris/actions-hugo@v2  with:  hugo-version: \u0026#39;latest\u0026#39;  extended: true   - name: Build  run: hugo --minify   - name: Deploy  uses: peaceiris/actions-gh-pages@v3  with:  personal_token: ${{ secrets.PERSONAL_TOKEN }} # The personal token for the GitHub Actions  external_repository: \u0026lt;githubusername\u0026gt;/\u0026lt;githubusername\u0026gt;.github.io  # The external repository to deploy  publish_dir: ./public # The directory to deploy, default is public folder  full_commit_message: ${{ github.event.head_commit.message }}  cname: \u0026lt;your custom domain\u0026gt; # The custom domain you set This will create a CNAME file by GitHub Actions for the website in your public repository root everytime you do a push, and the custom domain will be used to access the website.\nAnd also at the same time you need to change the baseURL in your config.yaml file from \u0026lt;githubusername\u0026gt;.github.io to the custom domain, after this config your current config.yaml file should looks like this:\nbaseURL: \u0026#34;https://\u0026lt;your custom domain\u0026gt;/\u0026#34; title: \u0026lt;your website title\u0026gt; theme: PaperMod Epilogue Fianlly your website is successfully deployed to GitHub Pages. But this is only the beginning, you can continue to add more posts to the website, and you can also deploy more and more features or try different themes to your website.\nAs I can tell, Hugo is so many powerful, I hope you can find some useful features in it and add it to your website.\n","permalink":"https://blog.mindsmining.com/posts/how-to-build-static-website-using-hugo-github-actions/","summary":"A tutorial on how to build a static website using Hugo and GitHub Actions","title":"Build static website using Hugo and GitHub Actions"}]